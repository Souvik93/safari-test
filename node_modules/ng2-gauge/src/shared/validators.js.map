{"version":3,"sources":["../../../src/shared/validators.ts"],"names":[],"mappings":"AAEA,IAAM,SAAS,GAAG,UAAC,IAAY;IAC7B,OAAO,CAAC,KAAK,CAAC,qBAAmB,IAAM,CAAC,CAAC;AAC3C,CAAC,CAAC;AAEF,MAAM,CAAC,IAAM,QAAQ,GAAG,UAAC,KAAiB;IACxC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;QACf,SAAS,CAAC,+BAA+B,CAAC,CAAC;IAC7C,CAAC;IAED,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,GAAG,IAAI,KAAK,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;QACvF,SAAS,CAAC,sDAAsD,CAAC,CAAC;IACpE,CAAC;IAED,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;QAC3C,SAAS,CAAC,gFAAgF,CAAC,CAAC;IAC9F,CAAC;IAED,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,IAAI,KAAK,CAAC,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;QAC9C,SAAS,CAAC,8DAA8D,CAAC,CAAC;IAC5E,CAAC;IAED,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;QAClB,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,UAAC,CAAS;YAC9B,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,KAAK,CAAC,GAAG,IAAI,CAAC,CAAC,EAAE,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;gBAC3C,SAAS,CAAC,yDAAyD,CAAC,CAAC;YACvE,CAAC;YAED,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACnB,SAAS,CAAC,iFAAiF,CAAC,CAAC;YAC/F,CAAC;YAED,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACb,SAAS,CAAC,YAAU,CAAC,CAAC,IAAI,UAAK,CAAC,CAAC,EAAE,sBAAmB,CAAC,CAAC;YAC1D,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC","file":"validators.js","sourceRoot":"","sourcesContent":["import { GaugeProps, Sector } from './gauge.interface';\r\n\r\nconst showError = (text: string) => {\r\n  console.error(`GaugeComponent: ${text}`);\r\n};\r\n\r\nexport const validate = (props: GaugeProps) => {\r\n  if (!props.max) {\r\n    showError('The maximal value is not set.');\r\n  }\r\n\r\n  if (!(0 <= props.start && props.start <= 359) || !(0 <= props.end && props.end <= 359)) {\r\n    showError('The end and start must be between 0 and 359 degrees.');\r\n  }\r\n\r\n  if (props.light && props.light > props.max) {\r\n    showError('The red light trigger value cannot be greater than the max value of the gauge.');\r\n  }\r\n\r\n  if (props.factor && props.factor >= props.max) {\r\n    showError('The factor cannot be greater than or equal to the max value.');\r\n  }\r\n\r\n  if (props.sectors) {\r\n    props.sectors.forEach((s: Sector) => {\r\n      if (s.from > props.max || s.to > props.max) {\r\n        showError('The sector bounds cannot be greater than the max value.');\r\n      }\r\n\r\n      if (s.from >= s.to) {\r\n        showError('The lower bound of the sector cannot be greater than or equal to the upper one.');\r\n      }\r\n\r\n      if (!s.color) {\r\n        showError(`Sector[${s.from}, ${s.to}] color is empty.`);\r\n      }\r\n    });\r\n  }\r\n};\r\n"]}