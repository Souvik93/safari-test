{"version":3,"sources":["../../src/gauge.component.ts"],"names":[],"mappings":"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","file":"gauge.component.js","sourceRoot":"","sourcesContent":["import {\r\n  Component, Input, ViewChild, OnInit,\r\n  AfterViewInit, Renderer2, ElementRef, ViewEncapsulation\r\n} from '@angular/core';\r\n\r\nimport { Sector, Line, Cartesian, RenderSector, Value, Separator, GaugeProps } from './shared/gauge.interface';\r\nimport { Config, GaugeConfig } from './shared/config';\r\nimport { validate } from './shared/validators';\r\n\r\n\r\nexport class GaugeComponent implements OnInit, AfterViewInit, GaugeProps {\r\n   gauge: ElementRef;\r\n   arrow: ElementRef;\r\n\r\n   start: number = Config.DEF_START;\r\n   end: number = Config.DEF_END;\r\n   max: number;\r\n   sectors: Sector[];\r\n   unit: string;\r\n   showDigital: boolean;\r\n   light: number;\r\n   lightTheme: boolean;\r\n   factor: number;\r\n   config: GaugeConfig;\r\n\r\n  Config: GaugeConfig = Config;\r\n  viewBox: string;\r\n  scaleLines: Line[];\r\n  scaleValues: Value[];\r\n  sectorArcs: RenderSector[];\r\n\r\n  radius: number;\r\n  center: number;\r\n  scaleFactor: number;\r\n  private _end: number;\r\n  private _input: number;\r\n\r\n  constructor(private _renderer: Renderer2) {\r\n    this.scaleLines = [];\r\n    this.scaleValues = [];\r\n  }\r\n\r\n  \r\n  set input(val: number) {\r\n    this._input = val;\r\n    this._updateArrowPos(val);\r\n  }\r\n\r\n  get input(): number {\r\n    return this._input;\r\n  }\r\n\r\n  get arc(): string {\r\n    return this._arc(0, this._end);\r\n  }\r\n\r\n  get gaugeRotationAngle(): number {\r\n    return this._end - this.end;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    validate(this);\r\n\r\n    const width = Config.WIDTH + Config.ARC_STROKE;\r\n\r\n    this.viewBox = `0 0 ${width} ${width}`;\r\n    this.radius = Config.WIDTH / 2;\r\n    this.center = width / 2;\r\n    this._end = this.end;\r\n\r\n    if (this.start > this.end) {\r\n      this._end += (360 - this.start);\r\n    } else {\r\n      this._end -= this.start;\r\n    }\r\n\r\n    this._updateArrowPos(this._input);\r\n    this._calculateSectors();\r\n    this.scaleFactor = this.factor || this._determineScaleFactor();\r\n    this._createScale();\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this._rotateGauge();\r\n  }\r\n\r\n  /**\r\n   * Calculate arc.\r\n   */\r\n  private _arc(start: number, end: number): string {\r\n    const largeArc = end - start <= 180 ? 0 : 1;\r\n    const startCoor = this._getAngleCoor(start);\r\n    const endCoor = this._getAngleCoor(end);\r\n\r\n    return `M ${endCoor.x} ${endCoor.y} A ${this.radius} ${this.radius} 0 ${largeArc} 0 ${startCoor.x} ${startCoor.y}`;\r\n  }\r\n\r\n  /**\r\n   * Get angle coordinates (Cartesian coordinates).\r\n   */\r\n  private _getAngleCoor(degrees: number): Cartesian {\r\n    const rads = (degrees - 90) * Math.PI / 180;\r\n    return {\r\n      x: (this.radius * Math.cos(rads)) + this.center,\r\n      y: (this.radius * Math.sin(rads)) + this.center\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate/translate the user-defined sectors to arcs.\r\n   */\r\n  private _calculateSectors(): void {\r\n    if (!this.sectors) {\r\n      return;\r\n    }\r\n\r\n    this.sectors = this.sectors.map((s: Sector) => {\r\n      const ratio = this._end / this.max;\r\n      s.from *= ratio;\r\n      s.to *= ratio;\r\n      return s;\r\n    });\r\n\r\n    this.sectorArcs = this.sectors.map((s: Sector) => {\r\n      return {\r\n        path: this._arc(s.from, s.to),\r\n        color: s.color\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update the position of the arrow based on the input.\r\n   */\r\n  private _updateArrowPos(input: number): void {\r\n    const pos = (this._end / this.max) * input;\r\n    this._renderer.setStyle(this.arrow.nativeElement, 'transform', `rotate(${pos}deg)`);\r\n  }\r\n\r\n  /**\r\n   * Rotate the gauge based on the start property. The CSS rotation, saves additional calculations with SVG.\r\n   */\r\n  private _rotateGauge(): void {\r\n    const angle = 360 - this.start;\r\n    this._renderer.setStyle(this.gauge.nativeElement, 'transform', `rotate(-${angle}deg)`);\r\n  }\r\n\r\n  /**\r\n   * Determine the scale factor (10^n number; i.e. if max = 9000 then scale_factor = 1000)\r\n   */\r\n  private _determineScaleFactor(factor = 10): number {\r\n    // Keep smaller factor until 3X\r\n    if (this.max / factor > 30) {\r\n      return this._determineScaleFactor(factor * 10);\r\n    }\r\n    return factor;\r\n  }\r\n\r\n  /**\r\n   * Determine the line frequency which represents after what angle we should put a line.\r\n   */\r\n  private _determineLineFrequency(): number {\r\n    const separators = this.max / this.scaleFactor;\r\n    const separateAtAngle = this._end / separators;\r\n    let lineFrequency: number;\r\n\r\n    // If separateAtAngle is not an integer, use its value as the line frequency.\r\n    if (separateAtAngle % 1 !== 0) {\r\n      lineFrequency = separateAtAngle;\r\n    } else {\r\n      lineFrequency = Config.INIT_LINE_FREQ * 2;\r\n      for (lineFrequency; lineFrequency <= separateAtAngle; lineFrequency++) {\r\n        if (separateAtAngle % lineFrequency === 0) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return lineFrequency;\r\n  }\r\n\r\n  /**\r\n   * Checks whether the line (based on index) is big or small separator.\r\n   */\r\n  private _isSeparatorReached(idx: number, lineFrequency: number): Separator {\r\n    const separators = this.max / this.scaleFactor;\r\n    const totalSeparators = this._end / lineFrequency;\r\n    const separateAtIdx = totalSeparators / separators;\r\n\r\n    if (idx % separateAtIdx === 0) {\r\n      return Separator.Big;\r\n    } else if (idx % (separateAtIdx / 2) === 0) {\r\n      return Separator.Small;\r\n    }\r\n    return Separator.NA;\r\n  };\r\n\r\n  /**\r\n   * Creates the scale.\r\n   */\r\n  private _createScale(): void {\r\n    const accumWith = this._determineLineFrequency() / 2;\r\n    const isAboveSuitableFactor = this.max / this.scaleFactor > 10;\r\n    let placedVals = 0;\r\n\r\n    for (let alpha = 0, i = 0; alpha >= (-1) * this._end; alpha -= accumWith, i++) {\r\n      let lineHeight = Config.SL_NORM;\r\n      const sepReached = this._isSeparatorReached(i, accumWith);\r\n\r\n      // Set the line height based on its type\r\n      switch (sepReached) {\r\n        case Separator.Big:\r\n          placedVals++;\r\n          lineHeight = Config.SL_SEP;\r\n          break;\r\n        case Separator.Small:\r\n          lineHeight = Config.SL_MID_SEP;\r\n          break;\r\n      }\r\n\r\n      // Draw the line\r\n      const higherEnd = this.center - Config.ARC_STROKE - 2;\r\n      const lowerEnd = higherEnd - lineHeight;\r\n\r\n      const alphaRad = Math.PI / 180 * (alpha + 180);\r\n      const sin = Math.sin(alphaRad);\r\n      const cos = Math.cos(alphaRad);\r\n      const color = this._getScaleLineColor(alpha);\r\n\r\n      this._addScaleLine(sin, cos, higherEnd, lowerEnd, color);\r\n\r\n      // Put a scale value\r\n      if (sepReached === Separator.Big) {\r\n        const isValuePosEven = placedVals % 2 === 0;\r\n        const isLast = alpha <= (-1) * this._end;\r\n\r\n        if (!(isAboveSuitableFactor && isValuePosEven && !isLast)) {\r\n          this._addScaleValue(sin, cos, lowerEnd, alpha);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the scale line color from the user-provided sectors definitions.\r\n   */\r\n  private _getScaleLineColor(alpha: number): string {\r\n    alpha *= (-1);\r\n    let color: string = '';\r\n\r\n    if (this.sectors) {\r\n      this.sectors.forEach((s: Sector) => {\r\n        if (s.from <= alpha && alpha <= s.to) {\r\n          color = s.color;\r\n        }\r\n      });\r\n    }\r\n\r\n    return color;\r\n  }\r\n\r\n  /**\r\n   * Add a scale line to the list that will be later rendered.\r\n   */\r\n  private _addScaleLine(sin: number, cos: number, higherEnd: number, lowerEnd: number, color: string): void {\r\n    this.scaleLines.push({\r\n      from: {\r\n        x: sin * higherEnd + this.center,\r\n        y: cos * higherEnd + this.center\r\n      },\r\n      to: {\r\n        x: sin * lowerEnd + this.center,\r\n        y: cos * lowerEnd + this.center\r\n      },\r\n      color\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Add a scale value.\r\n   */\r\n  private _addScaleValue(sin: number, cos: number, lowerEnd: number, alpha: number): void {\r\n    let val = Math.round(alpha * (this.max / this._end)) * (-1);\r\n    let posMargin = Config.TXT_MARGIN * 2;\r\n\r\n    // Use the multiplier instead of the real value, if above MAX_PURE_SCALE_VAL (i.e. 1000)\r\n    if (this.max > Config.MAX_PURE_SCALE_VAL) {\r\n      val /= this.scaleFactor;\r\n      val = Math.round(val * 100) / 100;\r\n      posMargin /= 2;\r\n    }\r\n\r\n    this.scaleValues.push({\r\n      text: val.toString(),\r\n      coor: {\r\n        x: sin * (lowerEnd - posMargin) + this.center,\r\n        y: cos * (lowerEnd - posMargin) + this.center\r\n      }\r\n    });\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  selector: 'ng-gauge',\r\n  template: `\r\n    <section class=\"angular-gauge\" [class.light]=\"lightTheme\">\r\n      <svg class=\"info\" [attr.viewBox]=\"viewBox\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <circle *ngIf=\"light\"\r\n          class=\"red-light\"\r\n          [class.on]=\"input >= light\"\r\n          [attr.cx]=\"center\"\r\n          [attr.cy]=\"Config.LIGHT_Y\"\r\n          [attr.r]=\"Config.LIGHT_RADIUS\">\r\n        </circle>\r\n        <text *ngIf=\"max > Config.MAX_PURE_SCALE_VAL\"\r\n          class=\"factor\"\r\n          [attr.x]=\"center\"\r\n          [attr.y]=\"Config.S_FAC_Y\">\r\n          x{{scaleFactor}} {{unit}}\r\n        </text>\r\n        <text *ngIf=\"showDigital\"\r\n          class=\"digital\"\r\n          [attr.x]=\"center\"\r\n          [attr.y]=\"Config.DIGITAL_Y\">\r\n          {{input}}\r\n        </text>\r\n        <text class=\"unit\" [attr.x]=\"center\" [attr.y]=\"Config.UNIT_Y\">{{unit}}</text>\r\n      </svg>\r\n      <svg #gauge [attr.viewBox]=\"viewBox\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path class=\"main-arc\" [attr.d]=\"arc\" [attr.stroke-width]=\"Config.ARC_STROKE\" fill=\"none\" />\r\n        <path *ngFor=\"let arc of sectorArcs\"\r\n          [attr.d]=\"arc.path\"\r\n          [attr.stroke]=\"arc.color\"\r\n          [attr.stroke-width]=\"Config.ARC_STROKE\"\r\n          fill=\"none\" />\r\n        <line *ngFor=\"let line of scaleLines\"\r\n          [attr.stroke-width]=\"Config.SL_WIDTH\"\r\n          [attr.stroke]=\"line.color || (!lightTheme ? '#333' : '#fff')\"\r\n          [attr.x1]=\"line.from.x\"\r\n          [attr.y1]=\"line.from.y\"\r\n          [attr.x2]=\"line.to.x\"\r\n          [attr.y2]=\"line.to.y\" />\r\n        <text *ngFor=\"let val of scaleValues\"\r\n          class=\"text-val\"\r\n          dominant-baseline=\"central\"\r\n          [attr.x]=\"val.coor.x\"\r\n          [attr.y]=\"val.coor.y\"\r\n          [attr.transform]=\"'rotate(' + gaugeRotationAngle + ', ' + val.coor.x + ', ' + val.coor.y + ')'\">\r\n          {{val.text}}\r\n        </text>\r\n        <rect #arrow\r\n          class=\"arrow\"\r\n          [attr.x]=\"center - Config.ARROW_WIDTH / 2\"\r\n          [attr.y]=\"Config.ARROW_Y\"\r\n          [attr.height]=\"center - Config.ARROW_Y\"\r\n          [attr.width]=\"Config.ARROW_WIDTH\"\r\n          [attr.rx]=\"Config.ARROW_WIDTH / 2\"\r\n          [attr.ry]=\"Config.ARROW_WIDTH / 2\">\r\n        </rect>\r\n        <circle class=\"arrow-pin\" [attr.cx]=\"center\" [attr.cy]=\"center\" [attr.r]=\"Config.ARROW_PIN_RAD\" />\r\n      </svg>\r\n    </section>\r\n  `,\r\n  styles: [`\r\n    @font-face {\r\n      font-family: 'Orbitron';\r\n      font-style: normal;\r\n      font-weight: 700;\r\n      src: local('Orbitron Bold'), local('Orbitron-Bold'), url(https://fonts.gstatic.com/s/orbitron/v8/Y82YH_MJJWnsH2yUA5AuYY4P5ICox8Kq3LLUNMylGO4.woff2) format('woff2');\r\n      unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2212, U+2215;\r\n    }\r\n\r\n    .angular-gauge {\r\n      position: relative;\r\n      width: 400px;\r\n    }\r\n\r\n    .angular-gauge svg.info {\r\n      position: absolute;\r\n      top: 0;\r\n      left: 0;\r\n    }\r\n\r\n    .angular-gauge rect.arrow {\r\n      transform-origin: 50% 100%;\r\n      fill: orange;\r\n    }\r\n\r\n    .angular-gauge text {\r\n      font-family: 'Orbitron', sans-serif;\r\n      font-weight: bold;\r\n      text-anchor: middle;\r\n      fill: #333;\r\n    }\r\n\r\n    .angular-gauge.light text {\r\n      fill: #fff;\r\n    }\r\n\r\n    .angular-gauge text.text-val {\r\n      font-size: 12px;\r\n    }\r\n\r\n    .angular-gauge circle.arrow-pin {\r\n      fill: #333;\r\n    }\r\n\r\n    .angular-gauge path.main-arc {\r\n      stroke: #333;\r\n    }\r\n\r\n    .angular-gauge.light path.main-arc {\r\n      stroke: #fff;\r\n    }\r\n\r\n    .angular-gauge text.factor {\r\n      font-size: 7px;\r\n    }\r\n\r\n    .angular-gauge text.digital {\r\n      font-size: 16px;\r\n    }\r\n\r\n    .angular-gauge text.unit {\r\n      font-size: 10px;\r\n    }\r\n\r\n    .angular-gauge circle.red-light {\r\n      fill: #ff4f4f;\r\n      opacity: 0.1;\r\n    }\r\n\r\n    .angular-gauge circle.red-light.on {\r\n      opacity: 1;\r\n    }\r\n\r\n  `],\r\n  encapsulation: ViewEncapsulation.None\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'gauge': [{ type: ViewChild, args: ['gauge', ] },],\n'arrow': [{ type: ViewChild, args: ['arrow', ] },],\n'start': [{ type: Input },],\n'end': [{ type: Input },],\n'max': [{ type: Input },],\n'sectors': [{ type: Input },],\n'unit': [{ type: Input },],\n'showDigital': [{ type: Input },],\n'light': [{ type: Input },],\n'lightTheme': [{ type: Input },],\n'factor': [{ type: Input },],\n'config': [{ type: Input },],\n'input': [{ type: Input },],\n};\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}